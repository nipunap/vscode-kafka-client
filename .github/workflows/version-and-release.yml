name: Version and Release

on:
  # Trigger manually only - version bump will be done via PR
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: false
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
        default: auto

jobs:
  version-and-release:
    name: Version and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use GITHUB_TOKEN with write permissions to push version bump
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      # Note: CI checks are enforced by branch protection before merge to main
      # No need to wait for CI here since this only runs after successful merge
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install versioning tools
        run: npm install -g commit-and-tag-version
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Determine version bump
        id: version_bump
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, this will be the first release"
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Last tag: $LAST_TAG"
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          
          # Check for breaking changes
          if echo "$COMMITS" | grep -qiE "^(feat|fix|chore|docs|style|refactor|perf|test)(\(.+\))?!:|BREAKING CHANGE:"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Found breaking changes - MAJOR bump"
          # Check for features
          elif echo "$COMMITS" | grep -qiE "^feat(\(.+\))?:"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Found new features - MINOR bump"
          # Otherwise patch
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Only fixes/chores - PATCH bump"
          fi
      
      - name: Override version bump (if manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type != 'auto'
        run: |
          echo "bump_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        id: manual_version
      
      - name: Get final bump type
        id: final_bump
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.release_type }}" != "auto" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            echo "type=${{ steps.version_bump.outputs.bump_type }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if release needed
        id: check_release
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if there are any commits since last tag
          COMMITS_SINCE_TAG=$(git rev-list $LAST_TAG..HEAD --count)
          if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
            echo "needed=true" >> $GITHUB_OUTPUT
            echo "Found $COMMITS_SINCE_TAG commits since last tag"
          else
            echo "needed=false" >> $GITHUB_OUTPUT
            echo "No commits since last tag, skipping release"
          fi
      
      - name: Run commit-and-tag-version
        if: steps.check_release.outputs.needed == 'true'
        run: |
          BUMP_TYPE="${{ steps.final_bump.outputs.type }}"
          echo "Creating $BUMP_TYPE release..."
          
          npx commit-and-tag-version \
            --release-as $BUMP_TYPE \
            --skip.commit true \
            --skip.tag true
      
      - name: Get new version
        if: steps.check_release.outputs.needed == 'true'
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"
      
      - name: Compile TypeScript
        if: steps.check_release.outputs.needed == 'true'
        run: npm run compile
      
      - name: Install vsce
        if: steps.check_release.outputs.needed == 'true'
        run: npm install -g @vscode/vsce
      
      - name: Package extension
        if: steps.check_release.outputs.needed == 'true'
        run: vsce package --skip-license
        continue-on-error: true
      
      - name: Create release branch and commit version bump
        if: steps.check_release.outputs.needed == 'true'
        run: |
          RELEASE_BRANCH="release/v${{ steps.get_version.outputs.version }}"
          git checkout -b "$RELEASE_BRANCH"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): v${{ steps.get_version.outputs.version }}"
          git push origin "$RELEASE_BRANCH"
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
        id: create_branch
      
      - name: Create Release PR
        if: steps.check_release.outputs.needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore(release): v${{ steps.get_version.outputs.version }}`,
              body: `## 🚀 Release v${{ steps.get_version.outputs.version }}
              
              **Release Type:** ${{ steps.final_bump.outputs.type }}
              
              ### Changes
              - ✅ Version bumped in package.json
              - ✅ CHANGELOG.md updated
              - ✅ Ready for marketplace publish after merge
              
              This PR was automatically created by the release workflow.
              Merging this PR will trigger the final release and marketplace publish.`,
              head: '${{ steps.create_branch.outputs.release_branch }}',
              base: 'main'
            });
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('pr_url', pr.html_url);
        id: create_pr
      
      - name: Summary
        if: steps.check_release.outputs.needed == 'true'
        run: |
          echo "## 📝 Release PR Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.final_bump.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** ${{ steps.create_pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and merge the release PR" >> $GITHUB_STEP_SUMMARY
          echo "2. After merge, create and push a git tag: \`git tag v${{ steps.get_version.outputs.version }} && git push origin v${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Create GitHub Release manually from the tag" >> $GITHUB_STEP_SUMMARY
          echo "4. Run \`vsce publish\` to publish to marketplace" >> $GITHUB_STEP_SUMMARY
      
      - name: No release needed
        if: steps.check_release.outputs.needed == 'false'
        run: |
          echo "## ℹ️ No Release Needed" >> $GITHUB_STEP_SUMMARY
          echo "No commits since last release." >> $GITHUB_STEP_SUMMARY

