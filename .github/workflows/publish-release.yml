name: Publish Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

concurrency:
  group: publish-release
  cancel-in-progress: false

# Security: Explicitly define minimal permissions at workflow level
permissions:
  actions: none      # Prevent workflow manipulation
  checks: none       # Prevent check manipulation
  contents: write    # Needed for creating releases
  deployments: none  # Prevent deployment manipulation
  issues: write      # Needed for creating issues on publish failure
  packages: none     # Prevent package manipulation
  pull-requests: read # Needed for waiting on checks
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  wait-for-ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Wait for CI checks
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-regexp: '^(Build and Test|Lint Report|Status Check).*$'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success
        timeout-minutes: 30

  publish:
    name: Publish to Marketplace
    runs-on: ubuntu-latest
    needs: wait-for-ci
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to detect version change

      - name: Check if version changed
        id: version_check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Get previous version from git history
          git show HEAD~1:package.json > /tmp/prev-package.json 2>/dev/null || {
            echo "First commit or package.json didn't exist before"
            PREVIOUS_VERSION="0.0.0"
          }

          if [ -f /tmp/prev-package.json ]; then
            PREVIOUS_VERSION=$(node -e "try { console.log(require('/tmp/prev-package.json').version); } catch(e) { console.log('0.0.0'); }")
          else
            PREVIOUS_VERSION="0.0.0"
          fi

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          # Validate version format
          if ! [[ "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $CURRENT_VERSION"
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "✅ Version changed: $PREVIOUS_VERSION → $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Version unchanged, skipping release"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.version_check.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        if: steps.version_check.outputs.changed == 'true'
        run: npm ci

      - name: Install vsce
        if: steps.version_check.outputs.changed == 'true'
        run: npm install -g @vscode/vsce

      - name: Package extension (bundled with esbuild)
        if: steps.version_check.outputs.changed == 'true'
        run: npm run package

      - name: Create git tag
        if: steps.version_check.outputs.changed == 'true'
        run: |
          VERSION="v${{ steps.version_check.outputs.version }}"

          # Check if tag already exists remotely
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            echo "⚠️ Tag $VERSION already exists, skipping tag creation"
          else
            echo "Creating tag $VERSION"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$VERSION" -m "Release $VERSION"
            git push origin "$VERSION"
          fi

      - name: Create or update GitHub Release
        if: steps.version_check.outputs.changed == 'true'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_check.outputs.version }}
          name: Release v${{ steps.version_check.outputs.version }}
          body_path: CHANGELOG.md
          files: vscode-kafka-client-${{ steps.version_check.outputs.version }}.vsix
          draft: false
          prerelease: false
          make_latest: true
          fail_on_unmatched_files: true
          # If release exists, this will update it (append assets)
          # If release doesn't exist, this will create it with assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Azure token availability
        id: check_token
        if: steps.version_check.outputs.changed == 'true'
        env:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
        run: |
          if [ -n "$AZURE_TOKEN" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to VS Code Marketplace
        id: marketplace_publish
        if: steps.version_check.outputs.changed == 'true' && steps.check_token.outputs.has_token == 'true'
        run: |
          # Use the specific VSIX file for this version
          EXPECTED_VSIX="vscode-kafka-client-${{ steps.version_check.outputs.version }}.vsix"

          # Debug: List all files in current directory
          echo "Files in current directory:"
          ls -lh *.vsix || echo "No .vsix files found"

          if [ ! -f "$EXPECTED_VSIX" ]; then
            echo "::error::Expected VSIX file $EXPECTED_VSIX not found"
            exit 1
          fi

          # Get file size for verification
          FILE_SIZE=$(stat -f%z "$EXPECTED_VSIX" 2>/dev/null || stat -c%s "$EXPECTED_VSIX" 2>/dev/null)
          echo "VSIX file size: $FILE_SIZE bytes"

          if [ "$FILE_SIZE" -lt 10000 ]; then
            echo "::error::VSIX file appears to be too small ($FILE_SIZE bytes), likely corrupted"
            exit 1
          fi

          # Verify package (use globally installed vsce for consistency)
          echo "Verifying package $EXPECTED_VSIX..."
          if ! vsce ls --packagePath "$EXPECTED_VSIX" > /dev/null 2>&1; then
            echo "::error::Invalid VSIX package"
            echo "Attempting to show vsce output for debugging:"
            vsce ls --packagePath "$EXPECTED_VSIX" || true
            exit 1
          fi

          echo "Publishing $EXPECTED_VSIX to marketplace..."
          if vsce publish --packagePath "$EXPECTED_VSIX" --pat $VSCE_PAT; then
            echo "marketplace_publish_status=success" >> $GITHUB_OUTPUT
          else
            echo "marketplace_publish_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          VSCE_PAT: ${{ secrets.AZURE_TOKEN }}
        continue-on-error: true

      - name: Report marketplace publish failure
        if: steps.version_check.outputs.changed == 'true' && steps.marketplace_publish.outcome == 'failure'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Failed to publish v${{ steps.version_check.outputs.version }} to VS Code Marketplace',
              body: [
                '## Marketplace Publish Failed',
                '',
                '**Version:** v${{ steps.version_check.outputs.version }}',
                '**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                '',
                'The automated marketplace publish step failed. This may require manual intervention.',
                '',
                '### Next Steps:',
                '1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details',
                '2. Verify AZURE_TOKEN secret is valid and has proper permissions',
                '3. If needed, publish manually using: `vsce publish`',
                '4. Close this issue once resolved',
                '',
                '**Note:** The GitHub Release and git tag were created successfully.'
              ].join('\n'),
              labels: ['release', 'automation', 'bug']
            });

      - name: Check Open VSX token availability
        id: check_ovsx_token
        if: steps.version_check.outputs.changed == 'true'
        env:
          OVSX_TOKEN: ${{ secrets.OPEN_VSX_ACCESS_TOKEN }}
        run: |
          if [ -n "$OVSX_TOKEN" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to Open VSX Registry
        id: ovsx_publish
        if: steps.version_check.outputs.changed == 'true' && steps.check_ovsx_token.outputs.has_token == 'true'
        run: |
          # Find the specific VSIX file for this version
          EXPECTED_VSIX="vscode-kafka-client-${{ steps.version_check.outputs.version }}.vsix"

          if [ ! -f "$EXPECTED_VSIX" ]; then
            echo "::error::Expected VSIX file $EXPECTED_VSIX not found"
            exit 1
          fi

          # Get file size for verification
          FILE_SIZE=$(stat -f%z "$EXPECTED_VSIX" 2>/dev/null || stat -c%s "$EXPECTED_VSIX" 2>/dev/null)
          echo "VSIX file size: $FILE_SIZE bytes"

          if [ "$FILE_SIZE" -lt 10000 ]; then
            echo "::error::VSIX file appears to be too small ($FILE_SIZE bytes), likely corrupted"
            exit 1
          fi

          # Verify package (use globally installed vsce for consistency)
          echo "Verifying package $EXPECTED_VSIX..."
          if ! vsce ls --packagePath "$EXPECTED_VSIX" > /dev/null 2>&1; then
            echo "::error::Invalid VSIX package"
            echo "Attempting to show vsce output for debugging:"
            vsce ls --packagePath "$EXPECTED_VSIX" || true
            exit 1
          fi

          echo "Publishing $EXPECTED_VSIX to Open VSX Registry..."
          if npx ovsx publish --packagePath "$EXPECTED_VSIX" -p $OVSX_PAT; then
            echo "ovsx_publish_status=success" >> $GITHUB_OUTPUT
          else
            echo "ovsx_publish_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          OVSX_PAT: ${{ secrets.OPEN_VSX_ACCESS_TOKEN }}
        continue-on-error: true

      - name: Report Open VSX publish failure
        if: steps.version_check.outputs.changed == 'true' && steps.ovsx_publish.outcome == 'failure'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Failed to publish v${{ steps.version_check.outputs.version }} to Open VSX Registry',
              body: [
                '## Open VSX Publish Failed',
                '',
                '**Version:** v${{ steps.version_check.outputs.version }}',
                '**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                '',
                'The automated Open VSX publish step failed. This may require manual intervention.',
                '',
                '### Next Steps:',
                '1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details',
                '2. Verify OPEN_VSX_ACCESS_TOKEN secret is valid and has proper permissions',
                '3. If needed, publish manually using: `npx ovsx publish`',
                '4. Close this issue once resolved',
                '',
                '**Note:** The GitHub Release and git tag were created successfully.'
              ].join('\n'),
              labels: ['release', 'automation', 'bug']
            });

      - name: Summary
        if: steps.version_check.outputs.changed == 'true'
        run: |
          echo "## 🎉 Release v${{ steps.version_check.outputs.version }} Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Git tag created" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 GitHub Release created" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_token.outputs.has_token }}" == "true" ]; then
            if [ "${{ steps.marketplace_publish.outputs.marketplace_publish_status }}" == "success" ]; then
              echo "- ✅ Published to VS Code Marketplace" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ Marketplace publish failed (issue created automatically)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ⚠️ Marketplace publish skipped (AZURE_TOKEN not configured)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.check_ovsx_token.outputs.has_token }}" == "true" ]; then
            if [ "${{ steps.ovsx_publish.outputs.ovsx_publish_status }}" == "success" ]; then
              echo "- ✅ Published to Open VSX Registry" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ Open VSX publish failed (issue created automatically)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ⚠️ Open VSX publish skipped (OPEN_VSX_ACCESS_TOKEN not configured)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: No release
        if: steps.version_check.outputs.changed == 'false'
        run: |
          echo "## ℹ️ No Release" >> $GITHUB_STEP_SUMMARY
          echo "Version in package.json unchanged, skipping release." >> $GITHUB_STEP_SUMMARY