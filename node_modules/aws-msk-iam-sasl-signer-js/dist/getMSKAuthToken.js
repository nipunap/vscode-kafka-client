"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthTokenFromCredentialsProvider = exports.generateAuthToken = exports.generateAuthTokenFromRole = exports.generateAuthTokenFromProfile = void 0;
var signature_v4_1 = require("@smithy/signature-v4");
var util_format_url_1 = require("@aws-sdk/util-format-url");
var sha256_js_1 = require("@aws-crypto/sha256-js");
var mskCredentialProvider_1 = require("./mskCredentialProvider");
var constants_1 = require("./constants");
var version_1 = require("./version");
var logger_1 = require("./logger");
var client_sts_1 = require("@aws-sdk/client-sts");
/**
 * Function to generate auth token using a particular credential profile.
 */
var generateAuthTokenFromProfile = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (!options.awsProfileName) {
            throw new Error("AWS Profile name cannot be empty to generate auth token.");
        }
        return [2 /*return*/, (0, exports.generateAuthTokenFromCredentialsProvider)(__assign(__assign({}, options), { awsCredentialsProvider: (0, mskCredentialProvider_1.getCredentialsFromProfile)(options.awsProfileName) }))];
    });
}); };
exports.generateAuthTokenFromProfile = generateAuthTokenFromProfile;
/**
 * Function to generate auth token by assuming the provided IAM Role's ARN and optionally the session name.
 * To use complete AWS STS feature set, we recommend using function {@link generateAuthTokenFromCredentialsProvider}.
 */
var generateAuthTokenFromRole = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (!options.awsRoleArn) {
            throw new Error("IAM Role ARN cannot be empty to generate auth token.");
        }
        return [2 /*return*/, (0, exports.generateAuthTokenFromCredentialsProvider)(__assign(__assign({}, options), { awsCredentialsProvider: (0, mskCredentialProvider_1.getCredentialsFromRole)(options.region, options.awsRoleArn, options.awsRoleSessionName) }))];
    });
}); };
exports.generateAuthTokenFromRole = generateAuthTokenFromRole;
/**
 * Function to generate auth token from the AWS default credential provider chain.
 */
var generateAuthToken = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (0, exports.generateAuthTokenFromCredentialsProvider)(__assign(__assign({}, options), { awsCredentialsProvider: (0, mskCredentialProvider_1.getDefaultCredentials)(options) }))];
    });
}); };
exports.generateAuthToken = generateAuthToken;
/**
 * Function to generate auth token from the provided {@link AwsCredentialIdentityProvider}.
 */
var generateAuthTokenFromCredentialsProvider = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var credentials, hostname, signer, requestToSign, ttl, signedRequest, tokenExpiryInMillis, signedUrl, base64EncodedUrl;
    var _a, _b;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                if (!options.region) {
                    throw new Error("Region cannot be empty to generate auth token.");
                }
                if (!options.awsCredentialsProvider) {
                    throw new Error("AWS credentials provider cannot be empty to generate auth token.");
                }
                return [4 /*yield*/, options.awsCredentialsProvider()];
            case 1:
                credentials = _d.sent();
                if (!credentials.accessKeyId || !credentials.secretAccessKey) {
                    throw new Error("AWS credentials cannot be empty to generate auth token.");
                }
                if (!options.awsDebugCreds) return [3 /*break*/, 3];
                return [4 /*yield*/, logCallerIdentity(options.region, credentials, (_c = options.logger) !== null && _c !== void 0 ? _c : new logger_1.NoOpLogger())];
            case 2:
                _d.sent();
                _d.label = 3;
            case 3:
                hostname = getHostName(options.region);
                signer = new signature_v4_1.SignatureV4({
                    service: constants_1.SIGNING_SERVICE,
                    region: options.region,
                    credentials: credentials,
                    sha256: sha256_js_1.Sha256,
                    applyChecksum: false
                });
                requestToSign = {
                    method: constants_1.HTTP_METHOD,
                    headers: (_a = {},
                        _a[constants_1.HOST_HEADER] = hostname,
                        _a),
                    protocol: constants_1.HTTP_PROTOCOL,
                    hostname: hostname,
                    path: '/',
                    query: (_b = {},
                        _b[constants_1.ACTION_KEY] = constants_1.ACTION_VALUE,
                        _b)
                };
                ttl = credentials.expiration !== undefined
                    ? Math.min((credentials.expiration.getTime() - Date.now()) / 1000, constants_1.EXPIRY_IN_SECONDS)
                    : constants_1.EXPIRY_IN_SECONDS;
                return [4 /*yield*/, signer.presign(requestToSign, {
                        expiresIn: ttl
                    })];
            case 4:
                signedRequest = _d.sent();
                tokenExpiryInMillis = getTokenExpiry(signedRequest.query['X-Amz-Date'], ttl * 1000);
                // Add user-agent to signed request
                signedRequest.query['User-Agent'] = getUserAgent();
                signedUrl = (0, util_format_url_1.formatUrl)(signedRequest);
                base64EncodedUrl = Buffer.from(signedUrl, 'utf-8').toString('base64url');
                // Remove any padding characters from the encoded URL if any
                base64EncodedUrl = base64EncodedUrl.replace('/=/g', '');
                return [2 /*return*/, {
                        token: base64EncodedUrl,
                        expiryTime: tokenExpiryInMillis,
                    }];
        }
    });
}); };
exports.generateAuthTokenFromCredentialsProvider = generateAuthTokenFromCredentialsProvider;
function logCallerIdentity(region, credentials, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var stsClient, getCallerIdentityOutput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    stsClient = new client_sts_1.STSClient({
                        credentials: credentials,
                        region: region
                    });
                    return [4 /*yield*/, stsClient.send(new client_sts_1.GetCallerIdentityCommand({}))];
                case 1:
                    getCallerIdentityOutput = _a.sent();
                    logger.debug("Credentials Identity: {UserId: ".concat(getCallerIdentityOutput.UserId, ", Account: ").concat(getCallerIdentityOutput.Account, ", Arn: ").concat(getCallerIdentityOutput.Arn, "}"));
                    return [2 /*return*/];
            }
        });
    });
}
function getHostName(region) {
    return "kafka.".concat(region, ".amazonaws.com");
}
function getUserAgent() {
    return "aws-msk-iam-sasl-signer-js/".concat(version_1.LIB_VERSION);
}
/**
 * Function to return token expiry in millis.
 *
 * @param signingDate Request signing time.
 * @param ttl         Time To Live for token in millis
 */
function getTokenExpiry(signingDate, ttl) {
    var signingDateRegex = new RegExp(constants_1.SIGNING_DATE_REGEX_PATTERN);
    var matchResult = signingDateRegex.exec(signingDate);
    if (!matchResult) {
        throw new Error("Failed to parse `X-Amz-Date` from token");
    }
    return Date.UTC(Number(matchResult[1]), Number(matchResult[2]) - 1, Number(matchResult[3]), Number(matchResult[4]), Number(matchResult[5]), Number(matchResult[6]))
        + ttl;
}
//# sourceMappingURL=getMSKAuthToken.js.map