"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var getMSKAuthToken_1 = require("./getMSKAuthToken");
var client_sts_1 = require("@aws-sdk/client-sts");
var constants_1 = require("./constants");
var mockCredentials = {
    accessKeyId: 'testAccessKeyId',
    secretAccessKey: 'testSecretAccessKey',
    sessionToken: 'testSessionToken',
};
var mockIdentity = {
    UserId: 'testUserId',
    Account: 'testAccount'
};
var mockNodeProviderChain = jest.fn();
var mockIniCredentials = jest.fn();
var mockTemporaryCredentials = jest.fn();
var mockCredentialProvider = jest.fn().mockReturnValue(Promise.resolve(mockCredentials));
var mockStsClient = jest.fn();
var mockSend = jest.fn().mockReturnValue(Promise.resolve(mockIdentity));
jest.mock('@aws-sdk/credential-providers', function () { return ({
    fromNodeProviderChain: function (args) { return mockNodeProviderChain.mockImplementation(function () {
        return mockCredentialProvider;
    })(args); },
    fromIni: function (args) { return mockIniCredentials.mockImplementation(function () {
        return mockCredentialProvider;
    })(args); },
    fromTemporaryCredentials: function (args) { return mockTemporaryCredentials.mockImplementation(function () {
        return mockCredentialProvider;
    })(args); }
}); });
jest.mock("@aws-sdk/client-sts", function () { return ({
    STSClient: function (args) { return mockStsClient.mockImplementation(function () {
        return { send: mockSend };
    })(args); },
    GetCallerIdentityCommand: jest.fn()
}); });
beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
});
describe("generateAuthTokenFromCredentialsProvider", function () {
    it("should generate auth token with provided credentials", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
                        region: "us-east-1",
                        awsCredentialsProvider: mockCredentialProvider
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockNodeProviderChain).toBeCalledTimes(0);
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token with provided credentials and log credential identity", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
                        region: "us-east-1",
                        awsCredentialsProvider: mockCredentialProvider,
                        logger: console,
                        awsDebugCreds: true
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockNodeProviderChain).toBeCalledTimes(0);
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    verifyCallerIdentityInvokes("us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token with expiryTime sooner when credential close to expiring", function () { return __awaiter(void 0, void 0, void 0, function () {
        var now, ttl, credentials, expiringMockCredentialProvider, authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    now = Date.now();
                    jest.useFakeTimers().setSystemTime(now);
                    ttl = 10;
                    credentials = {
                        accessKeyId: 'testAccessKeyId',
                        secretAccessKey: 'testSecretAccessKey',
                        sessionToken: 'testSessionToken',
                        expiration: new Date(now + ttl * 1000),
                    };
                    expiringMockCredentialProvider = jest.fn().mockReturnValue(Promise.resolve(credentials));
                    return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
                            region: "us-east-1",
                            awsCredentialsProvider: expiringMockCredentialProvider,
                            logger: console,
                            awsDebugCreds: true
                        })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockNodeProviderChain).toBeCalledTimes(0);
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1", ttl);
                    verifyCallerIdentityInvokes("us-east-1", credentials);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should throw error when region is empty", function () {
        expect((0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
            region: '',
            awsCredentialsProvider: mockCredentialProvider
        })).rejects.toThrowError("Region cannot be empty to generate auth token.");
    });
    it("should throw error when credentials provider is null/undefined", function () {
        expect((0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
            region: "us-east-1",
            awsCredentialsProvider: undefined
        })).rejects.toThrowError("AWS credentials provider cannot be empty to generate auth token.");
    });
    it("should throw error when accessKeyId is empty", function () {
        expect((0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
            region: "us-east-1",
            awsCredentialsProvider: jest.fn().mockReturnValue(Promise.resolve({
                accessKeyId: '',
                secretAccessKey: 'testSecretAccessKey',
                sessionToken: 'testSessionToken',
            }))
        })).rejects.toThrowError("AWS credentials cannot be empty to generate auth token.");
    });
    it("should throw error when secretAccessKey is empty", function () {
        expect((0, getMSKAuthToken_1.generateAuthTokenFromCredentialsProvider)({
            region: "us-east-1",
            awsCredentialsProvider: jest.fn().mockReturnValue(Promise.resolve({
                accessKeyId: 'testAccessKeyId',
                secretAccessKey: '',
                sessionToken: 'testSessionToken',
            }))
        })).rejects.toThrowError("AWS credentials cannot be empty to generate auth token.");
    });
});
describe("generateAuthToken", function () {
    it("should generate auth token with default credentials", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthToken)({
                        region: "us-east-1"
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockNodeProviderChain).toBeCalledTimes(1);
                    expect(mockNodeProviderChain).toHaveBeenCalledWith({
                        "maxRetries": 3,
                        "roleSessionName": "MSKSASLDefaultSession",
                        "clientConfig": {
                            "region": "us-east-1",
                        },
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token with set role session name", function () { return __awaiter(void 0, void 0, void 0, function () {
        var roleSessionName, authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    roleSessionName = "my-custom-name";
                    return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthToken)({
                            region: "us-east-1",
                            awsRoleSessionName: roleSessionName
                        })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockNodeProviderChain).toBeCalledTimes(1);
                    expect(mockNodeProviderChain).toHaveBeenCalledWith({
                        "maxRetries": 3,
                        "roleSessionName": roleSessionName,
                        "clientConfig": {
                            "region": "us-east-1",
                        },
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token and log credential identity", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthToken)({
                        region: "us-east-1",
                        logger: console,
                        awsDebugCreds: true
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockNodeProviderChain).toBeCalledTimes(1);
                    expect(mockNodeProviderChain).toHaveBeenCalledWith({
                        "maxRetries": 3,
                        "roleSessionName": "MSKSASLDefaultSession",
                        "clientConfig": {
                            "region": "us-east-1",
                        },
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    verifyCallerIdentityInvokes("us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should throw error when region is empty", function () {
        expect((0, getMSKAuthToken_1.generateAuthToken)({ region: '' })).rejects.toThrowError("Region cannot be empty to generate auth token.");
    });
});
describe("generateAuthTokenFromProfile", function () {
    it("should generate auth token with profile name input", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromProfile)({
                        region: "us-east-1",
                        awsProfileName: "test-profile-name"
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockIniCredentials).toBeCalledTimes(1);
                    expect(mockIniCredentials).toHaveBeenCalledWith({
                        "profile": "test-profile-name"
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token with profile name input and log credential identity", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromProfile)({
                        region: "us-east-1",
                        awsProfileName: "test-profile-name",
                        logger: console,
                        awsDebugCreds: true
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockIniCredentials).toBeCalledTimes(1);
                    expect(mockIniCredentials).toHaveBeenCalledWith({
                        "profile": "test-profile-name"
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    verifyCallerIdentityInvokes("us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should throw error when profile name is empty", function () {
        expect((0, getMSKAuthToken_1.generateAuthTokenFromProfile)({
            region: "us-east-1",
            awsProfileName: ""
        })).rejects.toThrowError("AWS Profile name cannot be empty to generate auth token.");
    });
});
describe("generateAuthTokenFromRole", function () {
    it("should generate auth token with role arn input", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromRole)({
                        region: "us-east-1",
                        awsRoleArn: "test-role-arn"
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockTemporaryCredentials).toBeCalledTimes(1);
                    expect(mockTemporaryCredentials).toHaveBeenCalledWith({
                        params: {
                            RoleArn: "test-role-arn",
                            RoleSessionName: "MSKSASLDefaultSession"
                        },
                        clientConfig: {
                            region: "us-east-1",
                            maxAttempts: 3
                        }
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token with role arn and session name input", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromRole)({
                        region: "us-east-1",
                        awsRoleArn: "test-role-arn",
                        awsRoleSessionName: "test-session"
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockTemporaryCredentials).toBeCalledTimes(1);
                    expect(mockTemporaryCredentials).toHaveBeenCalledWith({
                        params: {
                            RoleArn: "test-role-arn",
                            RoleSessionName: "test-session"
                        },
                        clientConfig: {
                            region: "us-east-1",
                            maxAttempts: 3
                        }
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-east-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should generate auth token with role arn input  and log credential identity", function () { return __awaiter(void 0, void 0, void 0, function () {
        var authTokenResponse, signedUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, getMSKAuthToken_1.generateAuthTokenFromRole)({
                        region: "us-west-1",
                        awsRoleArn: "test-role-arn",
                        logger: console,
                        awsDebugCreds: true
                    })];
                case 1:
                    authTokenResponse = _a.sent();
                    verifyAuthTokenResponse(authTokenResponse);
                    expect(mockTemporaryCredentials).toBeCalledTimes(1);
                    expect(mockTemporaryCredentials).toHaveBeenCalledWith({
                        params: {
                            RoleArn: "test-role-arn",
                            RoleSessionName: "MSKSASLDefaultSession"
                        },
                        clientConfig: {
                            region: "us-west-1",
                            maxAttempts: 3
                        }
                    });
                    signedUrl = getURLFromAuthToken(authTokenResponse.token);
                    verifySignedURL(signedUrl, "us-west-1");
                    verifyCallerIdentityInvokes("us-west-1");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should throw error when role arn is empty", function () {
        expect((0, getMSKAuthToken_1.generateAuthTokenFromRole)({
            region: "us-east-1",
            awsRoleArn: ""
        })).rejects.toThrowError("IAM Role ARN cannot be empty to generate auth token.");
    });
});
function verifyAuthTokenResponse(authTokenResponse) {
    expect(authTokenResponse.token).toBeTruthy();
    expect(authTokenResponse.expiryTime).toBeTruthy();
}
function getURLFromAuthToken(authToken) {
    var decodedToken = Buffer.from(authToken, 'base64url').toString('utf-8');
    return new URL(decodedToken);
}
function verifySignedURL(signedUrl, region, ttl) {
    var _a;
    expect(signedUrl.hostname).toEqual("kafka.".concat(region, ".amazonaws.com"));
    expect(signedUrl.searchParams.get("Action")).toEqual("kafka-cluster:Connect");
    expect(signedUrl.searchParams.get("User-Agent")).toContain("aws-msk-iam-sasl-signer-js/");
    expect(signedUrl.searchParams.get("X-Amz-Algorithm")).toEqual("AWS4-HMAC-SHA256");
    var credentialTokens = signedUrl.searchParams.get("X-Amz-Credential").split("/");
    expect(credentialTokens[0]).toEqual("testAccessKeyId");
    expect(credentialTokens[2]).toEqual(region);
    expect(credentialTokens[3]).toEqual("kafka-cluster");
    expect(credentialTokens[4]).toEqual("aws4_request");
    expect(signedUrl.searchParams.get("X-Amz-Date")).toMatch(new RegExp(constants_1.SIGNING_DATE_REGEX_PATTERN));
    expect(signedUrl.searchParams.get("X-Amz-Expires")).toEqual((_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : "900");
    expect(signedUrl.searchParams.get("X-Amz-Security-Token")).toEqual("testSessionToken");
    expect(signedUrl.searchParams.get("X-Amz-Signature")).toBeTruthy();
    expect(signedUrl.searchParams.get("X-Amz-SignedHeaders")).toEqual("host");
}
function verifyCallerIdentityInvokes(region, credentials) {
    expect(mockStsClient).toBeCalledTimes(1);
    expect(mockStsClient).toHaveBeenCalledWith({
        "credentials": credentials !== null && credentials !== void 0 ? credentials : mockCredentials,
        "region": region
    });
    expect(mockSend).toBeCalledTimes(1);
    expect(mockSend).toHaveBeenCalledWith(new client_sts_1.GetCallerIdentityCommand({}));
    expect(mockSend).toHaveReturnedWith(Promise.resolve(mockIdentity));
}
//# sourceMappingURL=getMSKAuthToken.spec.js.map