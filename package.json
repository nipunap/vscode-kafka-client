{
  "name": "vscode-kafka-client",
  "displayName": "Kafka Client",
  "description": "Full-featured Kafka client with AWS MSK support, IAM authentication, role assumption, and auto-discovery",
  "version": "0.8.7",
  "publisher": "NipunaPerera",
  "license": "GPL-3.0",
  "icon": "resources/kafka-icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/nipunap/vscode-kafka-client.git"
  },
  "bugs": {
    "url": "https://github.com/nipunap/vscode-kafka-client/issues"
  },
  "homepage": "https://github.com/nipunap/vscode-kafka-client#readme",
  "keywords": [
    "kafka",
    "aws",
    "msk",
    "apache kafka",
    "streaming",
    "messaging",
    "iam",
    "consumer groups",
    "topics",
    "broker"
  ],
  "engines": {
    "vscode": "^1.90.0",
    "node": ">=20.0.0"
  },
  "categories": [
    "Programming Languages",
    "Testing",
    "Other"
  ],
  "galleryBanner": {
    "color": "#231F20",
    "theme": "dark"
  },
  "activationEvents": [
    "onView:kafkaExplorer",
    "onView:kafkaConsumerGroups",
    "onView:kafkaBrokers",
    "onView:kafkaStreams",
    "onView:kafkaTables",
    "onCommand:kafka.addCluster"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "kafka-explorer",
          "title": "Kafka",
          "icon": "resources/kafka-icon.svg"
        }
      ]
    },
    "views": {
      "kafka-explorer": [
        {
          "id": "kafkaExplorer",
          "name": "Clusters",
          "icon": "$(server-environment)"
        },
        {
          "id": "kafkaConsumerGroups",
          "name": "Consumer Groups",
          "icon": "$(organization)"
        },
        {
          "id": "kafkaStreams",
          "name": "Kafka Streams",
          "icon": "$(symbol-event)"
        },
        {
          "id": "kafkaTables",
          "name": "KTables",
          "icon": "$(table)"
        },
        {
          "id": "kafkaBrokers",
          "name": "Brokers",
          "icon": "$(server)"
        }
      ]
    },
    "commands": [
      {
        "command": "kafka.addCluster",
        "title": "Add Cluster",
        "icon": "$(add)"
      },
      {
        "command": "kafka.removeCluster",
        "title": "Remove Cluster",
        "icon": "$(trash)"
      },
      {
        "command": "kafka.refreshCluster",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "kafka.createTopic",
        "title": "Create Topic",
        "icon": "$(add)"
      },
      {
        "command": "kafka.deleteTopic",
        "title": "Delete Topic",
        "icon": "$(trash)"
      },
      {
        "command": "kafka.produceMessage",
        "title": "Produce Message",
        "icon": "$(edit)"
      },
      {
        "command": "kafka.consumeMessages",
        "title": "Consume Messages",
        "icon": "$(radio-tower)"
      },
      {
        "command": "kafka.viewConsumerGroup",
        "title": "View Consumer Group Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.deleteConsumerGroup",
        "title": "Delete Consumer Group",
        "icon": "$(trash)"
      },
      {
        "command": "kafka.resetConsumerGroupOffsets",
        "title": "Reset Offsets",
        "icon": "$(refresh)"
      },
      {
        "command": "kafka.showTopicDetails",
        "title": "Show Topic Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.showTopicDashboard",
        "title": "Show Topic Dashboard",
        "icon": "$(graph)"
      },
      {
        "command": "kafka.showConsumerGroupDetails",
        "title": "Show Consumer Group Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.findTopic",
        "title": "Kafka: Find Topic",
        "icon": "$(search)"
      },
      {
        "command": "kafka.findConsumerGroup",
        "title": "Kafka: Find Consumer Group",
        "icon": "$(search)"
      },
      {
        "command": "kafka.showACLDetails",
        "title": "Show ACL Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.createACL",
        "title": "Create ACL",
        "icon": "$(add)"
      },
      {
        "command": "kafka.deleteACL",
        "title": "Delete ACL",
        "icon": "$(trash)"
      },
      {
        "command": "kafka.findACL",
        "title": "Kafka: Find ACL",
        "icon": "$(search)"
      },
      {
        "command": "kafka.showACLHelp",
        "title": "ACL Help",
        "icon": "$(question)"
      },
      {
        "command": "kafka.showAuditLog",
        "title": "Show Audit Log",
        "icon": "$(list-ordered)"
      },
      {
        "command": "kafka.showBrokerDetails",
        "title": "Show Broker Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.findBroker",
        "title": "Kafka: Find Broker",
        "icon": "$(search)"
      },
      {
        "command": "kafka.findKStream",
        "title": "Kafka: Find KStream",
        "icon": "$(search)"
      },
      {
        "command": "kafka.findKTable",
        "title": "Kafka: Find KTable",
        "icon": "$(search)"
      },
      {
        "command": "kafka.showKStreamDetails",
        "title": "Show KStream Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.showKTableDetails",
        "title": "Show KTable Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.showClusterDashboard",
        "title": "Show Cluster Dashboard",
        "icon": "$(dashboard)"
      },
      {
        "command": "kafka.exportTopics",
        "title": "Export Topics to File",
        "icon": "$(export)"
      },
      {
        "command": "kafka.exportConsumerGroups",
        "title": "Export Consumer Groups to File",
        "icon": "$(export)"
      },
      {
        "command": "kafka.showTopicACLDetails",
        "title": "Show Topic ACL Details",
        "icon": "$(info)"
      },
      {
        "command": "kafka.addPartitions",
        "title": "Add Partitions",
        "icon": "$(add)"
      },
      {
        "command": "kafka.editTopicConfig",
        "title": "Edit Topic Configuration",
        "icon": "$(settings-gear)"
      },
      {
        "command": "kafka.editBrokerConfig",
        "title": "Edit Broker Configuration",
        "icon": "$(settings-gear)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "kafka.addCluster",
          "when": "view == kafkaExplorer",
          "group": "navigation"
        },
        {
          "command": "kafka.refreshCluster",
          "when": "view == kafkaExplorer",
          "group": "navigation"
        },
        {
          "command": "kafka.refreshCluster",
          "when": "view == kafkaConsumerGroups",
          "group": "navigation"
        },
        {
          "command": "kafka.findTopic",
          "when": "view == kafkaExplorer",
          "group": "navigation"
        },
        {
          "command": "kafka.findConsumerGroup",
          "when": "view == kafkaConsumerGroups",
          "group": "navigation"
        },
        {
          "command": "kafka.refreshCluster",
          "when": "view == kafkaBrokers",
          "group": "navigation"
        },
        {
          "command": "kafka.findBroker",
          "when": "view == kafkaBrokers",
          "group": "navigation"
        },
        {
          "command": "kafka.refreshCluster",
          "when": "view == kafkaStreams",
          "group": "navigation"
        },
        {
          "command": "kafka.findKStream",
          "when": "view == kafkaStreams",
          "group": "navigation"
        },
        {
          "command": "kafka.refreshCluster",
          "when": "view == kafkaTables",
          "group": "navigation"
        },
        {
          "command": "kafka.findKTable",
          "when": "view == kafkaTables",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "kafka.showClusterDashboard",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "0_info@1"
        },
        {
          "command": "kafka.createACL",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "2_acl@1"
        },
        {
          "command": "kafka.deleteACL",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "2_acl@2"
        },
        {
          "command": "kafka.exportTopics",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "3_export@1"
        },
        {
          "command": "kafka.exportConsumerGroups",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "3_export@2"
        },
        {
          "command": "kafka.removeCluster",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "9_danger@1"
        },
        {
          "command": "kafka.createTopic",
          "when": "view == kafkaExplorer && viewItem == cluster",
          "group": "1_modification@1"
        },
        {
          "command": "kafka.produceMessage",
          "when": "view == kafkaExplorer && viewItem == topic",
          "group": "2_actions@1"
        },
        {
          "command": "kafka.consumeMessages",
          "when": "view == kafkaExplorer && viewItem == topic",
          "group": "2_actions@2"
        },
        {
          "command": "kafka.showTopicDashboard",
          "when": "view == kafkaExplorer && viewItem == topic",
          "group": "0_info@1"
        },
        {
          "command": "kafka.addPartitions",
          "when": "view == kafkaExplorer && viewItem == topic",
          "group": "1_modification@1"
        },
        {
          "command": "kafka.editTopicConfig",
          "when": "view == kafkaExplorer && viewItem == topic",
          "group": "1_modification@2"
        },
        {
          "command": "kafka.deleteTopic",
          "when": "view == kafkaExplorer && viewItem == topic",
          "group": "9_danger@1"
        },
        {
          "command": "kafka.deleteConsumerGroup",
          "when": "view == kafkaConsumerGroups && viewItem == consumerGroup",
          "group": "9_danger@1"
        },
        {
          "command": "kafka.resetConsumerGroupOffsets",
          "when": "view == kafkaConsumerGroups && viewItem == consumerGroup",
          "group": "2_actions@1"
        },
        {
          "command": "kafka.showTopicACLDetails",
          "when": "view == kafkaExplorer && viewItem == topicACL",
          "group": "0_info@1"
        },
        {
          "command": "kafka.showACLHelp",
          "when": "view == kafkaExplorer && viewItem == topicACLContainer",
          "group": "0_info@1"
        },
        {
          "command": "kafka.showKStreamDetails",
          "when": "view == kafkaStreams && viewItem == kstream",
          "group": "0_info@1"
        },
        {
          "command": "kafka.produceMessage",
          "when": "view == kafkaStreams && viewItem == kstream",
          "group": "2_actions@1"
        },
        {
          "command": "kafka.consumeMessages",
          "when": "view == kafkaStreams && viewItem == kstream",
          "group": "2_actions@2"
        },
        {
          "command": "kafka.showKTableDetails",
          "when": "view == kafkaTables && viewItem == ktable",
          "group": "0_info@1"
        },
        {
          "command": "kafka.produceMessage",
          "when": "view == kafkaTables && viewItem == ktable",
          "group": "2_actions@1"
        },
        {
          "command": "kafka.consumeMessages",
          "when": "view == kafkaTables && viewItem == ktable",
          "group": "2_actions@2"
        },
        {
          "command": "kafka.editBrokerConfig",
          "when": "view == kafkaBrokers && viewItem == broker",
          "group": "1_modification@1"
        }
      ]
    },
    "configuration": {
      "title": "Kafka",
      "properties": {
        "kafka.clusters": {
          "type": "array",
          "default": [],
          "description": "List of Kafka clusters",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Cluster name"
              },
              "brokers": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Broker addresses"
              }
            }
          }
        },
        "kafka.logLevel": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info",
          "description": "Log level for Kafka extension output"
        },
        "kafka.connectionTimeout": {
          "type": "number",
          "default": 30000,
          "description": "Kafka connection timeout in milliseconds"
        },
        "kafka.requestTimeout": {
          "type": "number",
          "default": 60000,
          "description": "Kafka request timeout in milliseconds"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run bundle",
    "compile": "tsc -p ./",
    "compile:strict": "tsc -p ./ --noUnusedLocals --noUnusedParameters",
    "watch": "npm-run-all --parallel watch:*",
    "watch:tsc": "tsc -watch -p ./",
    "watch:esbuild": "node esbuild.js --watch",
    "bundle": "node esbuild.js --production",
    "bundle:dev": "node esbuild.js",
    "lint": "eslint src --ext ts",
    "pretest": "npm run compile:strict && npm run lint",
    "test": "node ./out/test/runTest.js",
    "test:coverage": "c8 npm test",
    "test:coverage:report": "c8 report --reporter=text --reporter=lcov --reporter=html",
    "test:unit": "mocha --require ts-node/register 'src/test/suite/**/*.test.ts'",
    "package": "node scripts/package-bundled.js",
    "publish": "node scripts/publish.js",
    "release": "commit-and-tag-version",
    "release:major": "commit-and-tag-version --release-as major",
    "release:minor": "commit-and-tag-version --release-as minor",
    "release:patch": "commit-and-tag-version --release-as patch"
  },
  "devDependencies": {
    "ovsx": "^0.8.3",
    "@types/ini": "^4.1.1",
    "@types/mocha": "^10.0.10",
    "@types/node": "^20.0.0",
    "@types/sinon": "^17.0.4",
    "@types/vscode": "^1.90.0",
    "@typescript-eslint/eslint-plugin": "^8.15.0",
    "@typescript-eslint/parser": "^8.15.0",
    "@vscode/test-electron": "^2.5.2",
    "c8": "^10.1.3",
    "commit-and-tag-version": "^12.5.0",
    "esbuild": "^0.25.10",
    "eslint": "^9.15.0",
    "globals": "^16.4.0",
    "mocha": "^11.7.4",
    "npm-run-all": "^4.1.5",
    "sinon": "^21.0.0",
    "typescript": "^5.7.2"
  },
  "dependencies": {
    "@aws-sdk/client-kafka": "^3.700.0",
    "@aws-sdk/client-sts": "^3.700.0",
    "@aws-sdk/credential-providers": "^3.700.0",
    "@aws/lambda-invoke-store": "^0.1.0",
    "aws-msk-iam-sasl-signer-js": "github:aws/aws-msk-iam-sasl-signer-js",
    "ini": "^5.0.0",
    "kafkajs": "^2.2.4"
  }
}
